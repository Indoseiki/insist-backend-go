basePath: /
definitions:
  dto.ChangePassword:
    properties:
      confirm_password:
        type: string
      password:
        type: string
    type: object
  dto.ChangePasswordAuth:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  dto.RoleMenus:
    properties:
      id_menu:
        items:
          type: integer
        type: array
      id_role:
        type: integer
    type: object
  dto.TwoFactorAuth:
    properties:
      otp_key:
        type: string
      username:
        type: string
    type: object
  dto.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.UserRoles:
    properties:
      id_role:
        items:
          type: integer
        type: array
      id_user:
        type: integer
    type: object
  model.MstApproval:
    properties:
      action:
        type: string
      approval_users:
        items:
          $ref: '#/definitions/model.MstApprovalUser'
        type: array
      count:
        type: integer
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_menu:
        type: integer
      id_updatedby:
        type: integer
      level:
        type: integer
      menu:
        $ref: '#/definitions/model.MstMenu'
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstApprovalUser:
    properties:
      approval:
        $ref: '#/definitions/model.MstApproval'
      id_approval:
        type: integer
      id_user:
        type: integer
      user:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstDept:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstKeyValue:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      key:
        type: string
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
      value:
        type: string
    type: object
  model.MstMenu:
    properties:
      children:
        items:
          $ref: '#/definitions/model.MstMenu'
        type: array
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      icon:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_parent:
        type: integer
      id_updatedby:
        type: integer
      is_delete:
        type: integer
      label:
        type: string
      menu_approvals:
        items:
          $ref: '#/definitions/model.MstApproval'
        type: array
      parent:
        $ref: '#/definitions/model.MstMenu'
      path:
        type: string
      role_permissions:
        items:
          $ref: '#/definitions/model.MstRolePermission'
        type: array
      sort:
        type: integer
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstReason:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_menu:
        type: integer
      id_updatedby:
        type: integer
      key:
        type: string
      menu:
        $ref: '#/definitions/model.MstMenu'
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstRole:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      name:
        type: string
      role_menus:
        items:
          $ref: '#/definitions/model.MstRoleMenu'
        type: array
      role_permissions:
        items:
          $ref: '#/definitions/model.MstRolePermission'
        type: array
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstRoleMenu:
    properties:
      id_menu:
        type: integer
      id_role:
        type: integer
      menu:
        $ref: '#/definitions/model.MstMenu'
      role:
        $ref: '#/definitions/model.MstRole'
    type: object
  model.MstRolePermission:
    properties:
      id_menu:
        type: integer
      id_role:
        type: integer
      is_create:
        type: boolean
      is_delete:
        type: boolean
      is_update:
        type: boolean
      menu:
        $ref: '#/definitions/model.MstMenu'
      role:
        $ref: '#/definitions/model.MstRole'
    type: object
  model.MstUser:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      dept:
        $ref: '#/definitions/model.MstDept'
      email:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_dept:
        type: integer
      id_updatedby:
        type: integer
      is_active:
        type: boolean
      is_two_fa:
        type: boolean
      name:
        type: string
      otp_key:
        type: string
      otp_url:
        type: string
      password:
        type: string
      refresh_token:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
      user_roles:
        items:
          $ref: '#/definitions/model.MstUserRole'
        type: array
      username:
        type: string
    type: object
  model.MstUserRole:
    properties:
      id_role:
        type: integer
      id_user:
        type: integer
      role:
        $ref: '#/definitions/model.MstRole'
      user:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.PasswordReset:
    properties:
      created_at:
        type: string
      expired_at:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      id_user:
        type: integer
      is_used:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:5050/api
info:
  contact: {}
  description: INSIST adalah sistem manajemen manufaktur milik PT. Indoseiki Metalutama.
    REST API Documentation untuk INSIST menjelaskan bagaimana pengembang dapat menggunakan
    API ini untuk mengelola dan mengakses data manufaktur perusahaan dengan aman dan
    efisien, menggunakan protokol HTTP dan metode REST seperti GET, POST, PUT, & DELETE.
  title: INSIST REST API Documentation
  version: "1.0"
paths:
  /admin/approval:
    get:
      consumes:
      - application/json
      description: Retrieves approvals with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approval
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approvals
      tags:
      - Approval
    post:
      consumes:
      - application/json
      description: Create a new approval with the provided details
      parameters:
      - description: Approval details
        in: body
        name: approval
        required: true
        schema:
          $ref: '#/definitions/model.MstApproval'
      produces:
      - application/json
      responses:
        "201":
          description: Approval created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new approval
      tags:
      - Approval
  /admin/approval-structure:
    get:
      consumes:
      - application/json
      description: Retrieves approval structures with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approval structure
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approval structures
      tags:
      - Approval Structure
  /admin/approval-structure/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific approval structure by its ID
      parameters:
      - description: Approval Structure ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval Structure found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval Structure not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval structure by ID
      tags:
      - Approval Structure
  /admin/approval-user:
    get:
      consumes:
      - application/json
      description: Retrieves approval userss with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approval users
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approval userss
      tags:
      - Approval User
    post:
      consumes:
      - application/json
      description: Create a new approval users with the provided details
      parameters:
      - description: Approval User details
        in: body
        name: approvalUser
        required: true
        schema:
          $ref: '#/definitions/model.MstApprovalUser'
      produces:
      - application/json
      responses:
        "201":
          description: Approval User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new approval users
      tags:
      - Approval User
  /admin/approval-user/{id}:
    delete:
      description: Delete a approval users by its ID
      parameters:
      - description: Approval User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Approval User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: ApprovalUser not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a approval users
      tags:
      - Approval User
  /admin/approval/{id}:
    delete:
      description: Delete a approval by its ID
      parameters:
      - description: Approval ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Approval deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a approval
      tags:
      - Approval
    get:
      consumes:
      - application/json
      description: Retrieve a specific approval by its ID
      parameters:
      - description: Approval ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval by ID
      tags:
      - Approval
    put:
      consumes:
      - application/json
      description: Update the details of an existing approval by its ID
      parameters:
      - description: Approval ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated approval details
        in: body
        name: approval
        required: true
        schema:
          $ref: '#/definitions/model.MstApproval'
      produces:
      - application/json
      responses:
        "200":
          description: Approval updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing approval
      tags:
      - Approval
  /admin/master/department:
    get:
      consumes:
      - application/json
      description: Retrieves departments with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering department
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of departments
      tags:
      - Department
    post:
      consumes:
      - application/json
      description: Create a new department with the provided details
      parameters:
      - description: Department details
        in: body
        name: dept
        required: true
        schema:
          $ref: '#/definitions/model.MstDept'
      produces:
      - application/json
      responses:
        "201":
          description: Department created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new department
      tags:
      - Department
  /admin/master/department/{id}:
    delete:
      description: Delete a department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Department deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Department not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a department
      tags:
      - Department
    get:
      consumes:
      - application/json
      description: Retrieve a specific department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Department found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Department not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get department by ID
      tags:
      - Department
    put:
      consumes:
      - application/json
      description: Update the details of an existing department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated department details
        in: body
        name: dept
        required: true
        schema:
          $ref: '#/definitions/model.MstDept'
      produces:
      - application/json
      responses:
        "200":
          description: Department updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Department not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing department
      tags:
      - Department
  /admin/master/employee:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of employees with optional search parameters
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of rows per page (default is 20)
        in: query
        name: rows
        type: integer
      - description: Search term for employee name or number
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid query parameters'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve Employee List
      tags:
      - Employee
  /admin/master/employee/{number}:
    get:
      consumes:
      - application/json
      description: Fetch the details of a specific employee using their employee number
      parameters:
      - description: Employee number
        in: path
        name: number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid employee number'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Employee not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve Employee by Number
      tags:
      - Employee
  /admin/master/employee/sync:
    get:
      consumes:
      - application/json
      description: Sync employee data from the external HRIS API and update the local
        database
      produces:
      - application/json
      responses:
        "200":
          description: Data synchronization successful
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Synchronize Employee Data
      tags:
      - Employee
  /admin/master/key-value:
    get:
      consumes:
      - application/json
      description: Retrieves key values with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering key value
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of key values
      tags:
      - Key Value
    post:
      consumes:
      - application/json
      description: Create a new key value with the provided details
      parameters:
      - description: Key Value details
        in: body
        name: keyValue
        required: true
        schema:
          $ref: '#/definitions/model.MstKeyValue'
      produces:
      - application/json
      responses:
        "201":
          description: Key Value created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new key value
      tags:
      - Key Value
  /admin/master/key-value/{id}:
    delete:
      description: Delete a key value by its ID
      parameters:
      - description: Key Value ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Key Value deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Key Value not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a key value
      tags:
      - Key Value
    get:
      consumes:
      - application/json
      description: Retrieve a specific key value by its ID
      parameters:
      - description: Key Value ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Key Value found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Key Value not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get key value by ID
      tags:
      - Key Value
    put:
      consumes:
      - application/json
      description: Update the details of an existing key value by its ID
      parameters:
      - description: Key Value ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated key value details
        in: body
        name: keyValue
        required: true
        schema:
          $ref: '#/definitions/model.MstKeyValue'
      produces:
      - application/json
      responses:
        "200":
          description: Key Value updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Key Value not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing key value
      tags:
      - Key Value
  /admin/master/menu:
    get:
      consumes:
      - application/json
      description: Retrieves menus with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering menu
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of menus
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Create a new menu with the provided details
      parameters:
      - description: Menu details
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.MstMenu'
      produces:
      - application/json
      responses:
        "201":
          description: Menu created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new menu
      tags:
      - Menu
  /admin/master/menu/{id}:
    delete:
      description: Delete a menu by its ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Menu deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Menu not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a menu
      tags:
      - Menu
    get:
      consumes:
      - application/json
      description: Retrieve a specific menu by its ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Menu found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Menu not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get menu by ID
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update the details of an existing menu by its ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated menu details
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.MstMenu'
      produces:
      - application/json
      responses:
        "200":
          description: Menu updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Menu not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing menu
      tags:
      - Menu
  /admin/master/reason:
    get:
      consumes:
      - application/json
      description: Retrieves reasons with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - default: 0
        description: ID Menu
        in: query
        name: id_menu
        type: integer
      - description: Search keyword for filtering reason
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of reasons
      tags:
      - Reason
    post:
      consumes:
      - application/json
      description: Create a new reason with the provided details
      parameters:
      - description: Reason details
        in: body
        name: reason
        required: true
        schema:
          $ref: '#/definitions/model.MstReason'
      produces:
      - application/json
      responses:
        "201":
          description: Reason created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new reason
      tags:
      - Reason
  /admin/master/reason/{id}:
    delete:
      description: Delete a reason by its ID
      parameters:
      - description: Reason ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Reason deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Reason not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a reason
      tags:
      - Reason
    get:
      consumes:
      - application/json
      description: Retrieve a specific reason by its ID
      parameters:
      - description: Reason ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Reason found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Reason not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get reason by ID
      tags:
      - Reason
    put:
      consumes:
      - application/json
      description: Update the details of an existing reason by its ID
      parameters:
      - description: Reason ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated reason details
        in: body
        name: reason
        required: true
        schema:
          $ref: '#/definitions/model.MstReason'
      produces:
      - application/json
      responses:
        "200":
          description: Reason updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Reason not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing reason
      tags:
      - Reason
  /admin/master/role:
    get:
      consumes:
      - application/json
      description: Retrieves roles with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role with the provided details
      parameters:
      - description: Role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.MstRole'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new role
      tags:
      - Role
  /admin/master/role-menu:
    get:
      consumes:
      - application/json
      description: Retrieves Role Menus with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering Role Menu
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of Role Menus
      tags:
      - Role Menu
    post:
      consumes:
      - application/json
      description: Create a new Role Menu with the provided details
      parameters:
      - description: Role Menu details
        in: body
        name: RoleMenu
        required: true
        schema:
          $ref: '#/definitions/dto.RoleMenus'
      produces:
      - application/json
      responses:
        "201":
          description: Role Menu created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new Role Menu
      tags:
      - Role Menu
  /admin/master/role-menu/{id}:
    delete:
      description: Delete a RoleMenu by its ID
      parameters:
      - description: Role Menu ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Role Menu deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: RoleMenu not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a roleMenu
      tags:
      - Role Menu
    get:
      consumes:
      - application/json
      description: Retrieve a specific Role Menu by its ID
      parameters:
      - description: Role Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role Menu found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role Menu not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get Role Menu by ID
      tags:
      - Role Menu
  /admin/master/role/{id}:
    delete:
      description: Delete a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Role deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a role
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Retrieve a specific role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get role by ID
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update the details of an existing role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.MstRole'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing role
      tags:
      - Role
  /admin/master/tree-menu:
    get:
      description: Retrieve the menu tree structure
      responses:
        "200":
          description: Menu tree retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get the menu tree
      tags:
      - Menu
  /admin/master/tree-menu/user:
    get:
      description: Retrieve the menu tree structure specific to a user login based
        on their ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "200":
          description: Menu tree for user retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get the menu tree for a user login
      tags:
      - Menu
  /admin/master/user-role:
    get:
      consumes:
      - application/json
      description: Retrieves User Roles with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering User Role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of User Roles
      tags:
      - User Role
    post:
      consumes:
      - application/json
      description: Create a new User Role with the provided details
      parameters:
      - description: User Role details
        in: body
        name: UserRole
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoles'
      produces:
      - application/json
      responses:
        "201":
          description: User Role created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new User Role
      tags:
      - User Role
  /admin/master/user-role/{id}:
    delete:
      description: Delete a UserRole by its ID
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: User Role deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: UserRole not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a userRole
      tags:
      - User Role
    get:
      consumes:
      - application/json
      description: Retrieve a specific User Role by its ID
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User Role found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User Role not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get User Role by ID
      tags:
      - User Role
  /admin/master/users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users based on search criteria
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of users per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering users
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.MstUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - Users
  /admin/master/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing user based on the provided user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid user ID'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the provided user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user details based on the provided user ID and new data
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.MstUser'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing user
      tags:
      - Users
  /admin/master/users/{id}/change-password:
    put:
      consumes:
      - application/json
      description: Changes the password for user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New password and confirmation password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input or Confirm password does not match'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Change user password user
      tags:
      - Users
  /admin/role-permission:
    post:
      consumes:
      - application/json
      description: Create a new role permission or update an existing one if it already
        exists
      parameters:
      - description: Role Permission data
        in: body
        name: rolePermission
        required: true
        schema:
          $ref: '#/definitions/model.MstRolePermission'
      produces:
      - application/json
      responses:
        "201":
          description: Role permission created or updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create or update a role permission
      tags:
      - Role Permission
  /admin/role-permission/{id}:
    get:
      description: Retrieve the menu tree associated with a specific role by role
        ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Menu tree role permission retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get menu tree by role
      tags:
      - Role Permission
  /auth/{id}/two-fa:
    put:
      consumes:
      - application/json
      description: Configures two-factor authentication and generates an OTP key for
        the specified user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Two-factor authentication update successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Set up two-factor authentication for a user
      tags:
      - Authentication
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Change the password for the authenticated user
      parameters:
      - description: Current and new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid current password'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Change user password auth
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password, returns access token
      parameters:
      - description: Login details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Incorrect password, inactive user, or two-factor
            authentication required'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - Authentication
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: Log out the user by invalidating the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid or missing refresh token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Logout a user
      tags:
      - Authentication
  /auth/password-reset:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a valid, unused, and non-expired
        token
      parameters:
      - description: Password reset token
        in: query
        name: token
        required: true
        type: string
      - description: New password details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Passwords do not match or input is invalid'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Expired or used token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Invalid token'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Reset user password
      tags:
      - Authentication
  /auth/send-password-reset:
    post:
      consumes:
      - application/json
      description: Sends a password reset link to the specified user after generating
        a reset token
      parameters:
      - description: Password reset details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'Internal Server Error: Failed to send email'
          schema:
            additionalProperties: true
            type: object
      summary: Send a password reset link to the user's email
      tags:
      - Authentication
  /auth/token:
    get:
      consumes:
      - application/json
      description: Renew the access token using a valid refresh token from cookies
      produces:
      - application/json
      responses:
        "200":
          description: Access token renewed successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid or missing refresh token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /auth/two-fa:
    post:
      consumes:
      - application/json
      description: Validate the user's two-factor authentication using an OTP key
      parameters:
      - description: Two-factor authentication details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFactorAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Two-factor authentication successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid OTP'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Verify Two-Factor Authentication
      tags:
      - Authentication
  /auth/user-info:
    get:
      consumes:
      - application/json
      description: Retrieve the information of the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid or missing access token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get user information
      tags:
      - Authentication
swagger: "2.0"
