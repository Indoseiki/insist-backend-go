basePath: /
definitions:
  dto.ChangePassword:
    properties:
      confirm_password:
        type: string
      password:
        type: string
    type: object
  dto.ChangePasswordAuth:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  dto.CreateMachinePayload:
    properties:
      machine:
        $ref: '#/definitions/model.MstMachine'
      machine_detail:
        $ref: '#/definitions/model.MstMachineDetail'
      machine_status:
        $ref: '#/definitions/model.MstMachineStatus'
    type: object
  dto.FCSBuildings:
    properties:
      id_building:
        items:
          type: integer
        type: array
      id_fcs:
        type: integer
    type: object
  dto.RoleMenus:
    properties:
      id_menu:
        items:
          type: integer
        type: array
      id_role:
        type: integer
    type: object
  dto.TwoFactorAuth:
    properties:
      otp_key:
        type: string
      username:
        type: string
    type: object
  dto.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.UserRoles:
    properties:
      id_role:
        items:
          type: integer
        type: array
      id_user:
        type: integer
    type: object
  model.ActivityLog:
    properties:
      action:
        type: string
      created_at:
        type: string
      id:
        type: integer
      id_user:
        type: integer
      ip_address:
        type: string
      is_success:
        type: boolean
      message:
        type: string
      os:
        type: string
      user:
        $ref: '#/definitions/model.MstUser'
      user_agent:
        type: string
      username:
        type: string
    type: object
  model.ApprovalHistory:
    properties:
      approval:
        $ref: '#/definitions/model.MstApproval'
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_approval:
        type: integer
      id_createdby:
        type: integer
      key:
        type: string
      message:
        type: string
      ref_id:
        type: integer
      ref_table:
        type: string
    type: object
  model.MstApproval:
    properties:
      action:
        type: string
      approval_users:
        items:
          $ref: '#/definitions/model.MstApprovalUser'
        type: array
      count:
        type: integer
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_menu:
        type: integer
      id_updatedby:
        type: integer
      level:
        type: integer
      menu:
        $ref: '#/definitions/model.MstMenu'
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstApprovalUser:
    properties:
      approval:
        $ref: '#/definitions/model.MstApproval'
      id_approval:
        type: integer
      id_user:
        type: integer
      user:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstBank:
    properties:
      account:
        $ref: '#/definitions/model.MstChartOfAccount'
      account_num:
        type: string
      address:
        type: string
      bic:
        type: string
      city:
        type: string
      code:
        type: string
      country:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      currency:
        $ref: '#/definitions/model.MstCurrency'
      id:
        type: integer
      id_account:
        type: integer
      id_createdby:
        type: integer
      id_currency:
        type: integer
      id_updatedby:
        type: integer
      name:
        type: string
      remarks:
        type: string
      state:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
      zip_code:
        type: string
    type: object
  model.MstBillingTerm:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      cutoff_day:
        type: integer
      description:
        type: string
      discount_days:
        type: integer
      discount_percent:
        type: number
      due_days:
        type: integer
      holiday_offset_method:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      is_advanced_terms:
        type: boolean
      is_cash_only:
        type: boolean
      prox_code:
        type: integer
      prox_discount_day:
        type: integer
      prox_discount_months_forward:
        type: integer
      prox_due_day:
        type: integer
      prox_months_forward:
        type: integer
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstBuilding:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      plant:
        type: string
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstChartOfAccount:
    properties:
      account:
        type: integer
      class:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      exchange_rate_type:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstCurrency:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      currency:
        type: string
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstCurrencyRate:
    properties:
      buy_rate:
        type: number
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      effective_date:
        type: string
      from_currency:
        $ref: '#/definitions/model.MstCurrency'
      id:
        type: integer
      id_createdby:
        type: integer
      id_from_currency:
        type: integer
      id_to_currency:
        type: integer
      id_updatedby:
        type: integer
      sell_rate:
        type: number
      to_currency:
        $ref: '#/definitions/model.MstCurrency'
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstDept:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstFCS:
    properties:
      buildings:
        items:
          $ref: '#/definitions/model.MstFCSBuilding'
        type: array
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstFCSBuilding:
    properties:
      building:
        $ref: '#/definitions/model.MstBuilding'
      fcs:
        $ref: '#/definitions/model.MstFCS'
      id_building:
        type: integer
      id_fcs:
        type: integer
    type: object
  model.MstItemCategory:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstItemProduct:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_item_category:
        type: integer
      id_item_sub_category:
        type: integer
      id_updatedby:
        type: integer
      item_category:
        $ref: '#/definitions/model.MstItemCategory'
      item_sub_category:
        $ref: '#/definitions/model.MstItemSubCategory'
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstItemSubCategory:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_item_category:
        type: integer
      id_updatedby:
        type: integer
      item_category:
        $ref: '#/definitions/model.MstItemCategory'
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstKeyValue:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      key:
        type: string
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
      value:
        type: string
    type: object
  model.MstLocation:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      id_warehouse:
        type: integer
      location:
        type: string
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
      warehouse:
        $ref: '#/definitions/model.MstWarehouse'
    type: object
  model.MstMachine:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstMachineDetail:
    properties:
      asset_num:
        type: string
      asset_num_old:
        type: string
      cavity:
        type: integer
      code:
        type: string
      code_old:
        type: string
      coolant:
        type: string
      coolant_capacity:
        type: number
      coolant_uom:
        $ref: '#/definitions/model.MstUoms'
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      dimension_front:
        type: number
      dimension_front_uom:
        $ref: '#/definitions/model.MstUoms'
      dimension_side:
        type: number
      dimension_side_uom:
        $ref: '#/definitions/model.MstUoms'
      electricity:
        type: number
      electricity_uom:
        $ref: '#/definitions/model.MstUoms'
      hydraulic:
        type: string
      hydraulic_capacity:
        type: number
      hydraulic_uom:
        $ref: '#/definitions/model.MstUoms'
      id:
        type: integer
      id_coolant_uom:
        type: integer
      id_createdby:
        type: integer
      id_dimension_front_uom:
        type: integer
      id_dimension_side_uom:
        type: integer
      id_electricity_uom:
        type: integer
      id_hydraulic_uom:
        type: integer
      id_lubricant_uom:
        type: integer
      id_machine:
        type: integer
      id_power_uom:
        type: integer
      id_sliding_uom:
        type: integer
      id_updatedby:
        type: integer
      lubricant:
        type: string
      lubricant_capacity:
        type: number
      lubricant_uom:
        $ref: '#/definitions/model.MstUoms'
      machine:
        $ref: '#/definitions/model.MstMachine'
      maker:
        type: string
      name:
        type: string
      power:
        type: number
      power_uom:
        $ref: '#/definitions/model.MstUoms'
      rev_no:
        type: integer
      sliding:
        type: string
      sliding_capacity:
        type: number
      sliding_uom:
        $ref: '#/definitions/model.MstUoms'
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstMachineStatus:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_machine:
        type: integer
      id_reason:
        type: integer
      id_updatedby:
        type: integer
      machine:
        $ref: '#/definitions/model.MstMachine'
      reason:
        $ref: '#/definitions/model.MstReason'
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstMenu:
    properties:
      children:
        items:
          $ref: '#/definitions/model.MstMenu'
        type: array
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      icon:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_parent:
        type: integer
      id_updatedby:
        type: integer
      label:
        type: string
      menu_approvals:
        items:
          $ref: '#/definitions/model.MstApproval'
        type: array
      parent:
        $ref: '#/definitions/model.MstMenu'
      path:
        type: string
      role_permissions:
        $ref: '#/definitions/model.MstRolePermission'
      sort:
        type: integer
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstProcess:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstReason:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_menu:
        type: integer
      id_updatedby:
        type: integer
      key:
        type: string
      menu:
        $ref: '#/definitions/model.MstMenu'
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstRole:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      name:
        type: string
      role_menus:
        items:
          $ref: '#/definitions/model.MstRoleMenu'
        type: array
      role_permissions:
        items:
          $ref: '#/definitions/model.MstRolePermission'
        type: array
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstRoleMenu:
    properties:
      id_menu:
        type: integer
      id_role:
        type: integer
      menu:
        $ref: '#/definitions/model.MstMenu'
      role:
        $ref: '#/definitions/model.MstRole'
    type: object
  model.MstRolePermission:
    properties:
      id_menu:
        type: integer
      id_role:
        type: integer
      is_create:
        type: boolean
      is_delete:
        type: boolean
      is_update:
        type: boolean
      menu:
        $ref: '#/definitions/model.MstMenu'
      role:
        $ref: '#/definitions/model.MstRole'
    type: object
  model.MstSection:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      fcs:
        $ref: '#/definitions/model.MstFCS'
      id:
        type: integer
      id_createdby:
        type: integer
      id_fcs:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstSubSection:
    properties:
      building:
        $ref: '#/definitions/model.MstBuilding'
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_building:
        type: integer
      id_createdby:
        type: integer
      id_section:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      section:
        $ref: '#/definitions/model.MstSection'
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstTaxCode:
    properties:
      account_ap:
        $ref: '#/definitions/model.MstChartOfAccount'
      account_ar:
        $ref: '#/definitions/model.MstChartOfAccount'
      account_ar_process:
        $ref: '#/definitions/model.MstChartOfAccount'
      assess_on_return:
        type: boolean
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      deductible:
        type: boolean
      description:
        type: string
      id:
        type: integer
      id_account_ap:
        type: integer
      id_account_ar:
        type: integer
      id_account_ar_process:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      include_brokerage:
        type: boolean
      include_discount:
        type: boolean
      include_duty:
        type: boolean
      include_freight:
        type: boolean
      include_insurance:
        type: boolean
      include_local_freight:
        type: boolean
      include_misc:
        type: boolean
      include_price:
        type: boolean
      include_restock_fee:
        type: boolean
      include_surcharge:
        type: boolean
      include_tax_on_prev_system:
        type: boolean
      name:
        type: string
      rate:
        type: number
      type:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstUoms:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstUser:
    properties:
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      dept:
        $ref: '#/definitions/model.MstDept'
      email:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_dept:
        type: integer
      id_updatedby:
        type: integer
      is_active:
        type: boolean
      is_two_fa:
        type: boolean
      name:
        type: string
      otp_key:
        type: string
      otp_url:
        type: string
      password:
        type: string
      refresh_token:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
      user_roles:
        items:
          $ref: '#/definitions/model.MstUserRole'
        type: array
      username:
        type: string
    type: object
  model.MstUserRole:
    properties:
      id_role:
        type: integer
      id_user:
        type: integer
      role:
        $ref: '#/definitions/model.MstRole'
      user:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.MstWarehouse:
    properties:
      building:
        $ref: '#/definitions/model.MstBuilding'
      code:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.MstUser'
      description:
        type: string
      id:
        type: integer
      id_building:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      remarks:
        type: string
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/model.MstUser'
    type: object
  model.PasswordReset:
    properties:
      created_at:
        type: string
      expired_at:
        type: string
      id:
        type: integer
      id_createdby:
        type: integer
      id_updatedby:
        type: integer
      id_user:
        type: integer
      is_used:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8050/api
info:
  contact: {}
  description: INSIST adalah sistem manajemen manufaktur milik PT. Indoseiki Metalutama.
    REST API Documentation untuk INSIST menjelaskan bagaimana pengembang dapat menggunakan
    API ini untuk mengelola dan mengakses data manufaktur perusahaan dengan aman dan
    efisien, menggunakan protokol HTTP dan metode REST seperti GET, POST, PUT, & DELETE.
  title: INSIST REST API Documentation
  version: "1.0"
paths:
  /acf/master/bank:
    get:
      consumes:
      - application/json
      description: Retrieves banks with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering bank
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of banks
      tags:
      - Bank
    post:
      consumes:
      - application/json
      description: Create a new bank with the provided details
      parameters:
      - description: Bank details
        in: body
        name: bank
        required: true
        schema:
          $ref: '#/definitions/model.MstBank'
      produces:
      - application/json
      responses:
        "201":
          description: Bank created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new bank
      tags:
      - Bank
  /acf/master/bank/{id}:
    delete:
      description: Delete a bank by its ID
      parameters:
      - description: Bank ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Bank deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Bank not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a bank
      tags:
      - Bank
    get:
      consumes:
      - application/json
      description: Retrieve a specific bank by its ID
      parameters:
      - description: Bank ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Bank found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Bank not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get bank by ID
      tags:
      - Bank
    put:
      consumes:
      - application/json
      description: Update the details of an existing bank by its ID
      parameters:
      - description: Bank ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated bank details
        in: body
        name: bank
        required: true
        schema:
          $ref: '#/definitions/model.MstBank'
      produces:
      - application/json
      responses:
        "200":
          description: Bank updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Bank not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing bank
      tags:
      - Bank
  /acf/master/chart-of-account:
    get:
      consumes:
      - application/json
      description: Retrieves chart of accounts with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering chart of account
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of chart of accounts
      tags:
      - Chart Of Account
    post:
      consumes:
      - application/json
      description: Create a new chart of account with the provided details
      parameters:
      - description: Chart Of Account details
        in: body
        name: chartOfAccount
        required: true
        schema:
          $ref: '#/definitions/model.MstChartOfAccount'
      produces:
      - application/json
      responses:
        "201":
          description: Chart Of Account created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new chart of account
      tags:
      - Chart Of Account
  /acf/master/chart-of-account/{id}:
    delete:
      description: Delete a chart of account by its ID
      parameters:
      - description: Chart Of Account ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Chart Of Account deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Chart Of Account not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a chart of account
      tags:
      - Chart Of Account
    get:
      consumes:
      - application/json
      description: Retrieve a specific chart of account by its ID
      parameters:
      - description: Chart Of Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chart Of Account found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Chart Of Account not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get chart of account by ID
      tags:
      - Chart Of Account
    put:
      consumes:
      - application/json
      description: Update the details of an existing chart of account by its ID
      parameters:
      - description: Chart Of Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated chart of account details
        in: body
        name: chartOfAccount
        required: true
        schema:
          $ref: '#/definitions/model.MstChartOfAccount'
      produces:
      - application/json
      responses:
        "200":
          description: Chart Of Account updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Chart Of Account not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing chart of account
      tags:
      - Chart Of Account
  /acf/master/currency:
    get:
      consumes:
      - application/json
      description: Retrieves currencies with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering currency
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of currencies
      tags:
      - Currency
    post:
      consumes:
      - application/json
      description: Create a new currency with the provided details
      parameters:
      - description: Currency details
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/model.MstCurrency'
      produces:
      - application/json
      responses:
        "201":
          description: Currency created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new currency
      tags:
      - Currency
  /acf/master/currency-generate:
    get:
      description: Fetch currency data from external API and store it in the database
      parameters:
      - description: User ID who initiates the operation
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Currencies generated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid user ID'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Generate currencies from Frankfurter API
      tags:
      - Currency
  /acf/master/currency-rate:
    get:
      consumes:
      - application/json
      description: Retrieves currency rates with pagination and optional search
      parameters:
      - description: Currency ID
        in: query
        name: idCurrency
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering currency
        in: query
        name: search
        type: string
      - description: Field to sort by
        in: query
        name: sortBy
        type: string
      - description: Sorting direction (true for ascending, false for descending)
        in: query
        name: sortDirection
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of currency rates
      tags:
      - Currency Rate
    post:
      consumes:
      - application/json
      description: Create a new currency rate with the provided details
      parameters:
      - description: Currency Rate details
        in: body
        name: currency_rate
        required: true
        schema:
          $ref: '#/definitions/model.MstCurrencyRate'
      produces:
      - application/json
      responses:
        "201":
          description: Currency Rate created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new currency rate
      tags:
      - Currency Rate
  /acf/master/currency-rate/{id}:
    delete:
      description: Delete a currency rate by its ID
      parameters:
      - description: Currency Rate ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Currency Rate deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Currency Rate not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a currency
      tags:
      - Currency Rate
    get:
      consumes:
      - application/json
      description: Retrieve a specific currency rate by its ID
      parameters:
      - description: Currency Rate ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Currency Rate found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Currency Rate not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get currency rate by ID
      tags:
      - Currency Rate
    put:
      consumes:
      - application/json
      description: Update the details of an existing currency rate by its ID
      parameters:
      - description: Currency Rate ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated currency rate details
        in: body
        name: currency_rate
        required: true
        schema:
          $ref: '#/definitions/model.MstCurrencyRate'
      produces:
      - application/json
      responses:
        "200":
          description: Currency Rate updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Currency Rate not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing currency
      tags:
      - Currency Rate
  /acf/master/currency/{id}:
    delete:
      description: Delete a currency by its ID
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Currency deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Currency not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a currency
      tags:
      - Currency
    get:
      consumes:
      - application/json
      description: Retrieve a specific currency by its ID
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Currency found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Currency not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get currency by ID
      tags:
      - Currency
    put:
      consumes:
      - application/json
      description: Update the details of an existing currency by its ID
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated currency details
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/model.MstCurrency'
      produces:
      - application/json
      responses:
        "200":
          description: Currency updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Currency not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing currency
      tags:
      - Currency
  /acf/master/tax-code:
    get:
      consumes:
      - application/json
      description: Retrieves tax codes with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering tax code
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of tax codes
      tags:
      - Tax Code
    post:
      consumes:
      - application/json
      description: Create a new tax code with the provided details
      parameters:
      - description: Tax Code details
        in: body
        name: taxCode
        required: true
        schema:
          $ref: '#/definitions/model.MstTaxCode'
      produces:
      - application/json
      responses:
        "201":
          description: Tax Code created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new tax code
      tags:
      - Tax Code
  /acf/master/tax-code/{id}:
    delete:
      description: Delete a tax code by its ID
      parameters:
      - description: Tax Code ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Tax Code deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Tax Code not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a tax code
      tags:
      - Tax Code
    get:
      consumes:
      - application/json
      description: Retrieve a specific tax code by its ID
      parameters:
      - description: Tax Code ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tax Code found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Tax Code not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get tax code by ID
      tags:
      - Tax Code
    put:
      consumes:
      - application/json
      description: Update the details of an existing tax code by its ID
      parameters:
      - description: Tax Code ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated tax code details
        in: body
        name: taxCode
        required: true
        schema:
          $ref: '#/definitions/model.MstTaxCode'
      produces:
      - application/json
      responses:
        "200":
          description: Tax Code updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Tax Code not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing tax code
      tags:
      - Tax Code
  /admin/approval:
    get:
      consumes:
      - application/json
      description: Retrieves approvals with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approval
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approvals
      tags:
      - Approval
    post:
      consumes:
      - application/json
      description: Create a new approval with the provided details
      parameters:
      - description: Approval details
        in: body
        name: approval
        required: true
        schema:
          $ref: '#/definitions/model.MstApproval'
      produces:
      - application/json
      responses:
        "201":
          description: Approval created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new approval
      tags:
      - Approval
  /admin/approval-history:
    get:
      consumes:
      - application/json
      description: Retrieves approvalHistorys with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approvalHistory
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approvalHistorys
      tags:
      - Approval History
    post:
      consumes:
      - application/json
      description: Create a new approvalHistory with the provided details
      parameters:
      - description: Approval History details
        in: body
        name: approvalHistory
        required: true
        schema:
          $ref: '#/definitions/model.ApprovalHistory'
      produces:
      - application/json
      responses:
        "201":
          description: Approval History created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new approvalHistory
      tags:
      - Approval History
  /admin/approval-history/{id}:
    delete:
      description: Delete a approvalHistory by its ID
      parameters:
      - description: Approval History ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Approval History deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: ApprovalHistory not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a approvalHistory
      tags:
      - Approval History
    get:
      consumes:
      - application/json
      description: Retrieve a specific approvalHistory by its ID
      parameters:
      - description: Approval History ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval History found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: ApprovalHistory not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approvalHistory by ID
      tags:
      - Approval History
    put:
      consumes:
      - application/json
      description: Update the details of an existing approvalHistory by its ID
      parameters:
      - description: Approval History ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated approvalHistory details
        in: body
        name: approvalHistory
        required: true
        schema:
          $ref: '#/definitions/model.ApprovalHistory'
      produces:
      - application/json
      responses:
        "200":
          description: Approval History updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: ApprovalHistory not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing approvalHistory
      tags:
      - Approval History
  /admin/approval-history/{id}/ref:
    get:
      consumes:
      - application/json
      description: Retrieve approval histories based on the provided reference ID
        (as a path parameter) and reference table
      parameters:
      - description: Reference ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reference Table
        in: query
        name: ref_table
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Approval Histories found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID parameter'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval Histories not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval histories by reference ID
      tags:
      - Approval Histories
  /admin/approval-history/notifications:
    get:
      consumes:
      - application/json
      description: Retrieve approval notifications based on the authenticated user's
        ID
      produces:
      - application/json
      responses:
        "200":
          description: Approval Notifications found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval Notifications not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval notifications for the logged-in user
      tags:
      - Approval Notifications
  /admin/approval-structure:
    get:
      consumes:
      - application/json
      description: Retrieves approval structures with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approval structure
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approval structures
      tags:
      - Approval Structure
  /admin/approval-structure/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific approval structure by its ID
      parameters:
      - description: Approval Structure ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval Structure found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval Structure not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval structure by ID
      tags:
      - Approval Structure
  /admin/approval-structure/menu:
    get:
      consumes:
      - application/json
      description: Retrieve approval structure based on the provided menu path
      parameters:
      - description: Menu Path
        in: query
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Approval Structure found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid path'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval Structure not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval structure by menu path
      tags:
      - Approval Structure
  /admin/approval-user:
    get:
      consumes:
      - application/json
      description: Retrieves approval userss with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering approval users
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of approval userss
      tags:
      - Approval User
    post:
      consumes:
      - application/json
      description: Create a new approval users with the provided details
      parameters:
      - description: Approval User details
        in: body
        name: approvalUser
        required: true
        schema:
          $ref: '#/definitions/model.MstApprovalUser'
      produces:
      - application/json
      responses:
        "201":
          description: Approval User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new approval users
      tags:
      - Approval User
  /admin/approval-user/{id}:
    delete:
      description: Delete a approval users by its ID
      parameters:
      - description: Approval User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Approval User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: ApprovalUser not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a approval users
      tags:
      - Approval User
    get:
      consumes:
      - application/json
      description: Retrieve a specific approval by its ID Approval
      parameters:
      - description: menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval Users found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID Approval'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval Users not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval by ID Approval
      tags:
      - Approval Users
  /admin/approval/{id}:
    delete:
      description: Delete a approval by its ID
      parameters:
      - description: Approval ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Approval deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a approval
      tags:
      - Approval
    get:
      consumes:
      - application/json
      description: Retrieve a specific approval by its ID
      parameters:
      - description: Approval ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval by ID
      tags:
      - Approval
    put:
      consumes:
      - application/json
      description: Update the details of an existing approval by its ID
      parameters:
      - description: Approval ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated approval details
        in: body
        name: approval
        required: true
        schema:
          $ref: '#/definitions/model.MstApproval'
      produces:
      - application/json
      responses:
        "200":
          description: Approval updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing approval
      tags:
      - Approval
  /admin/approval/{id}/menu:
    get:
      consumes:
      - application/json
      description: Retrieve a specific approval by its ID Menu
      parameters:
      - description: menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Approval found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID Menu'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Approval not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get approval by ID Menu
      tags:
      - Approval
  /admin/master/ActivityLog:
    get:
      consumes:
      - application/json
      description: Retrieves Activity Logs with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering Activity Log
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of Activity Logs
      tags:
      - Activity Log
    post:
      consumes:
      - application/json
      description: Create a new Activity Log with the provided details
      parameters:
      - description: Activity Log details
        in: body
        name: ActivityLog
        required: true
        schema:
          $ref: '#/definitions/model.ActivityLog'
      produces:
      - application/json
      responses:
        "201":
          description: Activity Log created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new Activity Log
      tags:
      - Activity Log
  /admin/master/ActivityLog/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific Activity Log by its ID
      parameters:
      - description: Activity Log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Activity Log found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Activity Log not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get Activity Log by ID
      tags:
      - Activity Log
  /admin/master/department:
    get:
      consumes:
      - application/json
      description: Retrieves departments with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering department
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of departments
      tags:
      - Department
    post:
      consumes:
      - application/json
      description: Create a new department with the provided details
      parameters:
      - description: Department details
        in: body
        name: dept
        required: true
        schema:
          $ref: '#/definitions/model.MstDept'
      produces:
      - application/json
      responses:
        "201":
          description: Department created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new department
      tags:
      - Department
  /admin/master/department/{id}:
    delete:
      description: Delete a department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Department deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Department not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a department
      tags:
      - Department
    get:
      consumes:
      - application/json
      description: Retrieve a specific department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Department found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Department not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get department by ID
      tags:
      - Department
    put:
      consumes:
      - application/json
      description: Update the details of an existing department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated department details
        in: body
        name: dept
        required: true
        schema:
          $ref: '#/definitions/model.MstDept'
      produces:
      - application/json
      responses:
        "200":
          description: Department updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Department not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing department
      tags:
      - Department
  /admin/master/employee:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of employees with optional search parameters
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of rows per page (default is 20)
        in: query
        name: rows
        type: integer
      - description: Search term for employee name or number
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid query parameters'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve Employee List
      tags:
      - Employee
  /admin/master/employee/{number}:
    get:
      consumes:
      - application/json
      description: Fetch the details of a specific employee using their employee number
      parameters:
      - description: Employee number
        in: path
        name: number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid employee number'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Employee not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve Employee by Number
      tags:
      - Employee
  /admin/master/employee/sync:
    get:
      consumes:
      - application/json
      description: Sync employee data from the external HRIS API and update the local
        database
      produces:
      - application/json
      responses:
        "200":
          description: Data synchronization successful
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Synchronize Employee Data
      tags:
      - Employee
  /admin/master/key-value:
    get:
      consumes:
      - application/json
      description: Retrieves key values with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering key value
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of key values
      tags:
      - Key Value
    post:
      consumes:
      - application/json
      description: Create a new key value with the provided details
      parameters:
      - description: Key Value details
        in: body
        name: keyValue
        required: true
        schema:
          $ref: '#/definitions/model.MstKeyValue'
      produces:
      - application/json
      responses:
        "201":
          description: Key Value created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new key value
      tags:
      - Key Value
  /admin/master/key-value/{id}:
    delete:
      description: Delete a key value by its ID
      parameters:
      - description: Key Value ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Key Value deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Key Value not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a key value
      tags:
      - Key Value
    get:
      consumes:
      - application/json
      description: Retrieve a specific key value by its ID
      parameters:
      - description: Key Value ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Key Value found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Key Value not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get key value by ID
      tags:
      - Key Value
    put:
      consumes:
      - application/json
      description: Update the details of an existing key value by its ID
      parameters:
      - description: Key Value ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated key value details
        in: body
        name: keyValue
        required: true
        schema:
          $ref: '#/definitions/model.MstKeyValue'
      produces:
      - application/json
      responses:
        "200":
          description: Key Value updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Key Value not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing key value
      tags:
      - Key Value
  /admin/master/menu:
    get:
      consumes:
      - application/json
      description: Retrieves menus with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering menu
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of menus
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Create a new menu with the provided details
      parameters:
      - description: Menu details
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.MstMenu'
      produces:
      - application/json
      responses:
        "201":
          description: Menu created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new menu
      tags:
      - Menu
  /admin/master/menu/{id}:
    delete:
      description: Delete a menu by its ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Menu deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Menu not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a menu
      tags:
      - Menu
    get:
      consumes:
      - application/json
      description: Retrieve a specific menu by its ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Menu found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Menu not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get menu by ID
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update the details of an existing menu by its ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated menu details
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.MstMenu'
      produces:
      - application/json
      responses:
        "200":
          description: Menu updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Menu not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing menu
      tags:
      - Menu
  /admin/master/reason:
    get:
      consumes:
      - application/json
      description: Retrieves reasons with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - default: 0
        description: ID Menu
        in: query
        name: id_menu
        type: integer
      - description: Search keyword for filtering reason
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of reasons
      tags:
      - Reason
    post:
      consumes:
      - application/json
      description: Create a new reason with the provided details
      parameters:
      - description: Reason details
        in: body
        name: reason
        required: true
        schema:
          $ref: '#/definitions/model.MstReason'
      produces:
      - application/json
      responses:
        "201":
          description: Reason created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new reason
      tags:
      - Reason
  /admin/master/reason/{id}:
    delete:
      description: Delete a reason by its ID
      parameters:
      - description: Reason ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Reason deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Reason not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a reason
      tags:
      - Reason
    get:
      consumes:
      - application/json
      description: Retrieve a specific reason by its ID
      parameters:
      - description: Reason ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Reason found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Reason not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get reason by ID
      tags:
      - Reason
    put:
      consumes:
      - application/json
      description: Update the details of an existing reason by its ID
      parameters:
      - description: Reason ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated reason details
        in: body
        name: reason
        required: true
        schema:
          $ref: '#/definitions/model.MstReason'
      produces:
      - application/json
      responses:
        "200":
          description: Reason updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Reason not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing reason
      tags:
      - Reason
  /admin/master/role:
    get:
      consumes:
      - application/json
      description: Retrieves roles with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role with the provided details
      parameters:
      - description: Role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.MstRole'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new role
      tags:
      - Role
  /admin/master/role-menu:
    get:
      consumes:
      - application/json
      description: Retrieves Role Menus with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering Role Menu
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of Role Menus
      tags:
      - Role Menu
    post:
      consumes:
      - application/json
      description: Update a new Role Menu with the provided details
      parameters:
      - description: Role Menu details
        in: body
        name: RoleMenu
        required: true
        schema:
          $ref: '#/definitions/dto.RoleMenus'
      produces:
      - application/json
      responses:
        "201":
          description: Role Menu created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update a new Role Menu
      tags:
      - Role Menu
  /admin/master/role-menu/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific Role Menu by its ID
      parameters:
      - description: Role Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role Menu found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role Menu not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get Role Menu by ID
      tags:
      - Role Menu
  /admin/master/role/{id}:
    delete:
      description: Delete a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Role deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a role
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Retrieve a specific role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get role by ID
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update the details of an existing role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.MstRole'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Role not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing role
      tags:
      - Role
  /admin/master/tree-menu:
    get:
      description: Retrieve the menu tree structure
      responses:
        "200":
          description: Menu tree retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get the menu tree
      tags:
      - Menu
  /admin/master/tree-menu/user:
    get:
      description: Retrieve the menu tree structure specific to a user login based
        on their ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "200":
          description: Menu tree for user retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get the menu tree for a user login
      tags:
      - Menu
  /admin/master/user-role:
    get:
      consumes:
      - application/json
      description: Retrieves User Roles with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering User Role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of User Roles
      tags:
      - User Role
    post:
      consumes:
      - application/json
      description: Create a new User Role with the provided details
      parameters:
      - description: User Role details
        in: body
        name: UserRole
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoles'
      produces:
      - application/json
      responses:
        "201":
          description: User Role created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new User Role
      tags:
      - User Role
  /admin/master/user-role/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific User Role by its ID
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User Role found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User Role not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get User Role by ID
      tags:
      - User Role
  /admin/master/users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users based on search criteria
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of users per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering users
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.MstUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - Users
  /admin/master/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing user based on the provided user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid user ID'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the provided user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user details based on the provided user ID and new data
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.MstUser'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing user
      tags:
      - Users
  /admin/master/users/{id}/change-password:
    put:
      consumes:
      - application/json
      description: Changes the password for user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New password and confirmation password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input or Confirm password does not match'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Change user password user
      tags:
      - Users
  /admin/role-permission:
    post:
      consumes:
      - application/json
      description: Create a new role permission or update an existing one if it already
        exists
      parameters:
      - description: Role Permission data
        in: body
        name: rolePermission
        required: true
        schema:
          $ref: '#/definitions/model.MstRolePermission'
      produces:
      - application/json
      responses:
        "201":
          description: Role permission created or updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create or update a role permission
      tags:
      - Role Permission
  /admin/role-permission/{id}:
    get:
      description: Retrieve the menu tree associated with a specific role by role
        ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Menu tree role permission retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get menu tree by role
      tags:
      - Role Permission
  /auth/{id}/two-fa:
    put:
      consumes:
      - application/json
      description: Configures two-factor authentication and generates an OTP key for
        the specified user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Two-factor authentication update successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Set up two-factor authentication for a user
      tags:
      - Authentication
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Change the password for the authenticated user
      parameters:
      - description: Current and new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid current password'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Change user password auth
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password, returns access token
      parameters:
      - description: Login details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Incorrect password, inactive user'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'Forbidden: Two-factor authentication required'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - Authentication
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: Log out the user by invalidating the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid or missing refresh token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Logout a user
      tags:
      - Authentication
  /auth/password-reset:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a valid, unused, and non-expired
        token
      parameters:
      - description: Password reset token
        in: query
        name: token
        required: true
        type: string
      - description: New password details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Passwords do not match or input is invalid'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Expired or used token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Invalid token'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Reset user password
      tags:
      - Authentication
  /auth/send-password-reset:
    post:
      consumes:
      - application/json
      description: Sends a password reset link to the specified user after generating
        a reset token
      parameters:
      - description: Password reset details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'Internal Server Error: Failed to send email'
          schema:
            additionalProperties: true
            type: object
      summary: Send a password reset link to the user's email
      tags:
      - Authentication
  /auth/token:
    get:
      consumes:
      - application/json
      description: Renew the access token using a valid refresh token from cookies
      produces:
      - application/json
      responses:
        "200":
          description: Access token renewed successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid or missing refresh token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /auth/two-fa:
    post:
      consumes:
      - application/json
      description: Validate the user's two-factor authentication using an OTP key
      parameters:
      - description: Two-factor authentication details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFactorAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Two-factor authentication successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid OTP'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Verify Two-Factor Authentication
      tags:
      - Authentication
  /auth/user-info:
    get:
      consumes:
      - application/json
      description: Retrieve the information of the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'Unauthorized: Invalid or missing access token'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get user information
      tags:
      - Authentication
  /egd/master/process:
    get:
      consumes:
      - application/json
      description: Retrieves processs with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering process
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of processs
      tags:
      - Process
    post:
      consumes:
      - application/json
      description: Create a new process with the provided details
      parameters:
      - description: Process details
        in: body
        name: process
        required: true
        schema:
          $ref: '#/definitions/model.MstProcess'
      produces:
      - application/json
      responses:
        "201":
          description: Process created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new process
      tags:
      - Process
  /egd/master/process/{id}:
    delete:
      description: Delete a process by its ID
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Process deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Process not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a process
      tags:
      - Process
    get:
      consumes:
      - application/json
      description: Retrieve a specific process by its ID
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Process found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Process not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get process by ID
      tags:
      - Process
    put:
      consumes:
      - application/json
      description: Update the details of an existing process by its ID
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated process details
        in: body
        name: process
        required: true
        schema:
          $ref: '#/definitions/model.MstProcess'
      produces:
      - application/json
      responses:
        "200":
          description: Process updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Process not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing process
      tags:
      - Process
  /egd/master/uom:
    get:
      consumes:
      - application/json
      description: Retrieves uoms with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering uom
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of uoms
      tags:
      - UoM
    post:
      consumes:
      - application/json
      description: Create a new uom with the provided details
      parameters:
      - description: UoM details
        in: body
        name: uom
        required: true
        schema:
          $ref: '#/definitions/model.MstUoms'
      produces:
      - application/json
      responses:
        "201":
          description: UoM created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new uom
      tags:
      - UoM
  /egd/master/uom/{id}:
    delete:
      description: Delete a uom by its ID
      parameters:
      - description: UoM ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: UoM deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: UoM not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a uom
      tags:
      - UoM
    get:
      consumes:
      - application/json
      description: Retrieve a specific uom by its ID
      parameters:
      - description: UoM ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: UoM found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: UoM not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get uom by ID
      tags:
      - UoM
    put:
      consumes:
      - application/json
      description: Update the details of an existing uom by its ID
      parameters:
      - description: UoM ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated uom details
        in: body
        name: uom
        required: true
        schema:
          $ref: '#/definitions/model.MstUoms'
      produces:
      - application/json
      responses:
        "200":
          description: UoM updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: UoM not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing uom
      tags:
      - UoM
  /general/master/billing-term:
    get:
      consumes:
      - application/json
      description: Retrieves billing terms with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering billing term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of billing terms
      tags:
      - BillingTerm
    post:
      consumes:
      - application/json
      description: Create a new billing term with the provided details
      parameters:
      - description: Billing Term details
        in: body
        name: billingTerm
        required: true
        schema:
          $ref: '#/definitions/model.MstBillingTerm'
      produces:
      - application/json
      responses:
        "201":
          description: Billing Term created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new billing term
      tags:
      - BillingTerm
  /general/master/billing-term/{id}:
    delete:
      description: Delete a billing term by its ID
      parameters:
      - description: Billing Term ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Billing Term deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Billing Term not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a billing term
      tags:
      - BillingTerm
    get:
      consumes:
      - application/json
      description: Retrieve a specific billing term by its ID
      parameters:
      - description: Billing Term ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Billing Term found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Billing Term not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get billing term by ID
      tags:
      - BillingTerm
    put:
      consumes:
      - application/json
      description: Update the details of an existing billing term by its ID
      parameters:
      - description: Billing Term ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated billing term details
        in: body
        name: billingTerm
        required: true
        schema:
          $ref: '#/definitions/model.MstBillingTerm'
      produces:
      - application/json
      responses:
        "200":
          description: Billing Term updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Billing Term not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing billing term
      tags:
      - BillingTerm
  /general/master/item/category:
    get:
      consumes:
      - application/json
      description: Retrieves Item Categories with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering itemCategory
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of Item Categories
      tags:
      - Item Category
    post:
      consumes:
      - application/json
      description: Create a new Item Category with the provided details
      parameters:
      - description: Item Category details
        in: body
        name: ItemCategory
        required: true
        schema:
          $ref: '#/definitions/model.MstItemCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Item Category created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new Item Category
      tags:
      - Item Category
  /general/master/item/category/{id}:
    delete:
      description: Delete a Item Category by its ID
      parameters:
      - description: Item Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Item Category deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Category not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a itemCategory
      tags:
      - Item Category
    put:
      consumes:
      - application/json
      description: Update the details of an existing Item Category by its ID
      parameters:
      - description: Item Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Item Category details
        in: body
        name: ItemCategory
        required: true
        schema:
          $ref: '#/definitions/model.MstItemCategory'
      produces:
      - application/json
      responses:
        "200":
          description: Item Category updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Category not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing Item Category
      tags:
      - Item Category
  /general/master/item/category/{identifier}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific Item Category using either its numeric ID or
        alphanumeric Code via path param
      parameters:
      - description: Item Category ID (number) or Code (string)
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item Category found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid identifier'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Category not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get Item Category by ID or Code
      tags:
      - Item Category
  /general/master/item/product:
    get:
      consumes:
      - application/json
      description: Retrieves Item Products with pagination, search, filtering, and
        sorting options
      parameters:
      - description: Filter by Item Category Code
        in: query
        name: categoryCode
        type: string
      - description: Filter by Item Sub Category Code
        in: query
        name: subCategoryCode
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering Item Product
        in: query
        name: search
        type: string
      - description: Field to sort by
        in: query
        name: sortBy
        type: string
      - description: 'Sort direction: true for ascending, false for descending'
        in: query
        name: sortDirection
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of Item Products
      tags:
      - Item Product
    post:
      consumes:
      - application/json
      description: Create a new Item Product with the provided details
      parameters:
      - description: Item Product details
        in: body
        name: ItemProduct
        required: true
        schema:
          $ref: '#/definitions/model.MstItemProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Item Product created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new Item Product
      tags:
      - Item Product
  /general/master/item/product/{id}:
    delete:
      description: Delete a Item Product by its ID
      parameters:
      - description: Item Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Item Product deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Product not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a itemProduct
      tags:
      - Item Product
    get:
      consumes:
      - application/json
      description: Retrieve a specific Item Product by its ID
      parameters:
      - description: Item Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item Product found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Product not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get Item Product by ID
      tags:
      - Item Product
    put:
      consumes:
      - application/json
      description: Update the details of an existing Item Product by its ID
      parameters:
      - description: Item Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Item Product details
        in: body
        name: ItemProduct
        required: true
        schema:
          $ref: '#/definitions/model.MstItemProduct'
      produces:
      - application/json
      responses:
        "200":
          description: Item Product updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Product not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing Item Product
      tags:
      - Item Product
  /general/master/item/sub-category:
    get:
      consumes:
      - application/json
      description: Retrieves Item Sub Categories with pagination, filtering, search,
        and sorting
      parameters:
      - description: Filter by Item Category Code
        in: query
        name: categoryCode
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering Item Sub Category
        in: query
        name: search
        type: string
      - description: Field to sort by
        in: query
        name: sortBy
        type: string
      - description: 'Sort direction: true for ascending, false for descending'
        in: query
        name: sortDirection
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of Item Sub Categories
      tags:
      - Item Sub Category
    post:
      consumes:
      - application/json
      description: Create a new Item Sub Category with the provided details
      parameters:
      - description: Item Sub Category details
        in: body
        name: ItemSubCategory
        required: true
        schema:
          $ref: '#/definitions/model.MstItemSubCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Item Sub Category created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new Item Sub Category
      tags:
      - Item Sub Category
  /general/master/item/sub-category/{id}:
    delete:
      description: Delete a Item Sub Category by its ID
      parameters:
      - description: Item Sub Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Item Sub Category deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Sub Category not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a itemSubCategory
      tags:
      - Item Sub Category
    get:
      consumes:
      - application/json
      description: Retrieve a specific Item Sub Category by its ID
      parameters:
      - description: Item Sub Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item Sub Category found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Sub Category not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get Item Sub Category by ID
      tags:
      - Item Sub Category
    put:
      consumes:
      - application/json
      description: Update the details of an existing Item Sub Category by its ID
      parameters:
      - description: Item Sub Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Item Sub Category details
        in: body
        name: ItemSubCategory
        required: true
        schema:
          $ref: '#/definitions/model.MstItemSubCategory'
      produces:
      - application/json
      responses:
        "200":
          description: Item Sub Category updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Item Sub Category not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing Item Sub Category
      tags:
      - Item Sub Category
  /mnt/master/machine:
    get:
      consumes:
      - application/json
      description: Retrieves machines with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering machine
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of machines
      tags:
      - Machine
    post:
      consumes:
      - application/json
      description: Create a new machine with the provided details
      parameters:
      - description: Machine and its details
        in: body
        name: machine
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMachinePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Machine created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new machine
      tags:
      - Machine
  /mnt/master/machine/{id}:
    delete:
      description: Delete a machine by its ID
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Machine deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Machine not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a machine
      tags:
      - Machine
    get:
      consumes:
      - application/json
      description: Retrieve a specific machine by its ID
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Machine found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Machine not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get machine by ID
      tags:
      - Machine
    put:
      consumes:
      - application/json
      description: Update the details of an existing machine by its ID
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated machine details
        in: body
        name: machine
        required: true
        schema:
          $ref: '#/definitions/model.MstMachine'
      produces:
      - application/json
      responses:
        "200":
          description: Machine updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Machine not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing machine
      tags:
      - Machine
  /mnt/master/machine/{id}/detail:
    get:
      consumes:
      - application/json
      description: Fetches a list of machine details with optional sorting, and pagination.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of rows per page (default: 20)'
        in: query
        name: rows
        type: integer
      - description: Column name to sort by
        in: query
        name: sortBy
        type: string
      - description: 'Sorting direction: true for ascending, false for descending'
        in: query
        name: sortDirection
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Machine details retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid query parameters'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No machine details found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve machine details with pagination, sorting, and filtering
      tags:
      - Machine
  /mnt/master/machine/{id}/revision:
    put:
      consumes:
      - application/json
      description: This endpoint creates a new revision of an existing machine by
        copying its details and updating the revision number.
      parameters:
      - description: Detail Machine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Machine revision created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid machine ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Machine not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new revision of an existing machine
      tags:
      - Machine
  /mnt/master/machine/{id}/status:
    get:
      consumes:
      - application/json
      description: Fetches a list of machine status details for a specific machine
        ID with optional sorting and pagination.
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of rows per page (default: 20)'
        in: query
        name: rows
        type: integer
      - description: 'Column name to sort by (default: detail_updated_at)'
        in: query
        name: sortBy
        type: string
      - description: 'Sorting direction: false for ascending, true for descending
          (default: false)'
        in: query
        name: sortDirection
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Machine status details retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid query parameters'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No machine status details found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve machine status details with pagination, sorting, and filtering
      tags:
      - Machine
    put:
      consumes:
      - application/json
      description: Adds a new status entry for a specific machine ID.
      parameters:
      - description: Machine ID
        in: path
        name: id
        required: true
        type: integer
      - description: Machine status details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.MstMachineStatus'
      produces:
      - application/json
      responses:
        "201":
          description: Machine status created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new machine status
      tags:
      - Machine
  /pid/master/location:
    get:
      consumes:
      - application/json
      description: Retrieves locations with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering location
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of locations
      tags:
      - Location
    post:
      consumes:
      - application/json
      description: Create a new location with the provided details
      parameters:
      - description: Location details
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/model.MstLocation'
      produces:
      - application/json
      responses:
        "201":
          description: Location created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new location
      tags:
      - Location
  /pid/master/location/{id}:
    delete:
      description: Delete a location by its ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Location deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Location not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a location
      tags:
      - Location
    get:
      consumes:
      - application/json
      description: Retrieve a specific location by its ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Location found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Location not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get location by ID
      tags:
      - Location
    put:
      consumes:
      - application/json
      description: Update the details of an existing location by its ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated location details
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/model.MstLocation'
      produces:
      - application/json
      responses:
        "200":
          description: Location updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Location not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing location
      tags:
      - Location
  /pid/master/warehouse:
    get:
      consumes:
      - application/json
      description: Retrieves warehouses with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering warehouse
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of warehouses
      tags:
      - Warehouse
    post:
      consumes:
      - application/json
      description: Create a new warehouse with the provided details
      parameters:
      - description: Warehouse details
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/model.MstWarehouse'
      produces:
      - application/json
      responses:
        "201":
          description: Warehouse created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new warehouse
      tags:
      - Warehouse
  /pid/master/warehouse/{id}:
    delete:
      description: Delete a warehouse by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Warehouse deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Warehouse not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a warehouse
      tags:
      - Warehouse
    get:
      consumes:
      - application/json
      description: Retrieve a specific warehouse by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Warehouse found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Warehouse not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get warehouse by ID
      tags:
      - Warehouse
    put:
      consumes:
      - application/json
      description: Update the details of an existing warehouse by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated warehouse details
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/model.MstWarehouse'
      produces:
      - application/json
      responses:
        "200":
          description: Warehouse updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Warehouse not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing warehouse
      tags:
      - Warehouse
  /prd/master/building:
    get:
      consumes:
      - application/json
      description: Retrieves buildings with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering building
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of buildings
      tags:
      - Building
    post:
      consumes:
      - application/json
      description: Create a new building with the provided details
      parameters:
      - description: Building details
        in: body
        name: building
        required: true
        schema:
          $ref: '#/definitions/model.MstBuilding'
      produces:
      - application/json
      responses:
        "201":
          description: Building created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new building
      tags:
      - Building
  /prd/master/building/{id}:
    delete:
      description: Delete a building by its ID
      parameters:
      - description: Building ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Building deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Building not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a building
      tags:
      - Building
    get:
      consumes:
      - application/json
      description: Retrieve a specific building by its ID
      parameters:
      - description: Building ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Building found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Building not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get building by ID
      tags:
      - Building
    put:
      consumes:
      - application/json
      description: Update the details of an existing building by its ID
      parameters:
      - description: Building ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated building details
        in: body
        name: building
        required: true
        schema:
          $ref: '#/definitions/model.MstBuilding'
      produces:
      - application/json
      responses:
        "200":
          description: Building updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Building not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing building
      tags:
      - Building
  /prd/master/fcs:
    get:
      consumes:
      - application/json
      description: Retrieves fcs with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering fcs
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of fcs
      tags:
      - FCS
    post:
      consumes:
      - application/json
      description: Create a new fcs with the provided details
      parameters:
      - description: FCS details
        in: body
        name: fcs
        required: true
        schema:
          $ref: '#/definitions/model.MstFCS'
      produces:
      - application/json
      responses:
        "201":
          description: FCS created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new fcs
      tags:
      - FCS
  /prd/master/fcs-building:
    get:
      consumes:
      - application/json
      description: Retrieves FCS Buildings with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering FCS Building
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of FCS Buildings
      tags:
      - FCS Building
    post:
      consumes:
      - application/json
      description: Create a new FCS Building with the provided details
      parameters:
      - description: FCS Building details
        in: body
        name: FCSBuilding
        required: true
        schema:
          $ref: '#/definitions/dto.FCSBuildings'
      produces:
      - application/json
      responses:
        "201":
          description: FCS Building created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new FCS Building
      tags:
      - FCS Building
  /prd/master/fcs-building/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific FCS Building by its ID
      parameters:
      - description: FCS Building ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: FCS Building found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: FCS Building not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get FCS Building by ID
      tags:
      - FCS Building
  /prd/master/fcs/{id}:
    delete:
      description: Delete a fcs by its ID
      parameters:
      - description: FCS ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: FCS deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: FCS not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a fcs
      tags:
      - FCS
    get:
      consumes:
      - application/json
      description: Retrieve a specific fcs by its ID
      parameters:
      - description: FCS ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: FCS found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: FCS not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get fcs by ID
      tags:
      - FCS
    put:
      consumes:
      - application/json
      description: Update the details of an existing fcs by its ID
      parameters:
      - description: FCS ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated fcs details
        in: body
        name: fcs
        required: true
        schema:
          $ref: '#/definitions/model.MstFCS'
      produces:
      - application/json
      responses:
        "200":
          description: FCS updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: FCS not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing fcs
      tags:
      - FCS
  /prd/master/section:
    get:
      consumes:
      - application/json
      description: Retrieves sections with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering section
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of sections
      tags:
      - Section
    post:
      consumes:
      - application/json
      description: Create a new section with the provided details
      parameters:
      - description: Section details
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/model.MstSection'
      produces:
      - application/json
      responses:
        "201":
          description: Section created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new section
      tags:
      - Section
  /prd/master/section/{id}:
    delete:
      description: Delete a section by its ID
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Section deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Section not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a section
      tags:
      - Section
    get:
      consumes:
      - application/json
      description: Retrieve a specific section by its ID
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Section found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Section not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get section by ID
      tags:
      - Section
    put:
      consumes:
      - application/json
      description: Update the details of an existing section by its ID
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated section details
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/model.MstSection'
      produces:
      - application/json
      responses:
        "200":
          description: Section updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: Section not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing section
      tags:
      - Section
  /prd/master/sub-section:
    get:
      consumes:
      - application/json
      description: Retrieves subSections with pagination and optional search
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Number of rows per page
        in: query
        name: rows
        type: integer
      - description: Search keyword for filtering subSection
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data found successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: No data found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a list of subSections
      tags:
      - SubSection
    post:
      consumes:
      - application/json
      description: Create a new subSection with the provided details
      parameters:
      - description: SubSection details
        in: body
        name: subSection
        required: true
        schema:
          $ref: '#/definitions/model.MstSubSection'
      produces:
      - application/json
      responses:
        "201":
          description: SubSection created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new subSection
      tags:
      - SubSection
  /prd/master/sub-section/{id}:
    delete:
      description: Delete a subSection by its ID
      parameters:
      - description: SubSection ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: SubSection deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: SubSection not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a subSection
      tags:
      - SubSection
    get:
      consumes:
      - application/json
      description: Retrieve a specific subSection by its ID
      parameters:
      - description: SubSection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: SubSection found successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: SubSection not found'
          schema:
            additionalProperties: true
            type: object
      summary: Get subSection by ID
      tags:
      - SubSection
    put:
      consumes:
      - application/json
      description: Update the details of an existing subSection by its ID
      parameters:
      - description: SubSection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated subSection details
        in: body
        name: subSection
        required: true
        schema:
          $ref: '#/definitions/model.MstSubSection'
      produces:
      - application/json
      responses:
        "200":
          description: SubSection updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'Not Found: SubSection not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing subSection
      tags:
      - SubSection
swagger: "2.0"
